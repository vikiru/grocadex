// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//  Steps for making changes to schema.
// 1. Generate prisma client (if not already done): `npx primsa generate`
// 2. Create new migration: `npx prisma migrate dev --name your_migration_name`
//

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id          Int           @id @default(autoincrement())
    firstName   String
    lastName    String
    email       String        @unique
    username    String        @unique
    password    String
    receipts    Receipt[]
    activeItems GroceryItem[]
    expenses    Expense[]
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @default(now()) @updatedAt
}

model GroceryItem {
    id           Int      @id @default(autoincrement())
    user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
    userId       Int?
    receipt      Receipt  @relation(fields: [receiptId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    receiptId    Int
    name         String
    isActive     Boolean  @default(true)
    quantity     Int
    unitPrice    Decimal  @db.Decimal(10, 2)
    totalPrice   Decimal  @db.Decimal(10, 2)
    purchaseDate DateTime
    expiryDate   DateTime
    createdAt    DateTime @default(now())
    updatedAt    DateTime @default(now()) @updatedAt

    @@index([userId, receiptId])
    @@index([userId, isActive])
}

model Receipt {
    id           Int           @id @default(autoincrement())
    user         User          @relation(fields: [userId], references: [id])
    userId       Int
    store        String
    purchaseDate DateTime
    total        Decimal       @db.Decimal(10, 2)
    groceryItems GroceryItem[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @default(now()) @updatedAt

    @@index([userId])
}

model Expense {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    month     Int
    year      Int
    total     Decimal  @db.Decimal(10, 2)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@unique([userId, month, year])
    @@index([userId, month, year])
}
